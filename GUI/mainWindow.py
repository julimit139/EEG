# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newMainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from functools import partial
import os
import glob
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QSizePolicy
import artifactDetection as aD
import dataExtraction as dE
import graphPlotting as gP


class Ui_MainWindow(object):
    inputData = []
    detectionMethod = ""
    isArtifact = []
    blockNumber = 0
    message = ""
    fileList = []
    dirIterator = None

    def browseFiles(self):
        fileName = QFileDialog.getOpenFileName(self.centralwidget, "Open file", "C:/Users/Julia/Desktop",
                                               "ascii (*.asc)")
        self.pathLineEdit.setText(fileName[0])
        if self.pathLineEdit.text() is not None:
            self.uploadButton.setEnabled(True)

    def uploadFile(self):
        self.inputData = dE.extractInputData(self.pathLineEdit.text())
        self.methodComboBox.setEnabled(True)
        self.performButton.setEnabled(True)

    def chooseDetectionMethod(self):
        index = self.methodComboBox.currentIndex()
        if index == 0:
            self.detectionMethod = "performEEPDetection"
        elif index == 1:
            self.detectionMethod = "performECGDetection"
        elif index == 2:
            self.detectionMethod = "performLFPDetection"

    def performDetection(self):
        if self.detectionMethod == "performEEPDetection":
            result = aD.performEEPDetection(self.inputData)
        elif self.detectionMethod == "performECGDetection":
            result = aD.performECGDetection(self.inputData)
        elif self.detectionMethod == "performLFPDetection":
            result = aD.performLFPDetection(self.inputData)
        self.isArtifact = result[0]
        self.blockNumber = len(self.isArtifact)
        self.message = result[1]
        print(self.isArtifact)
        print(self.blockNumber)
        print(self.message)
        gP.plotAllBlocks(self.inputData, self.isArtifact, self.message)
        self.showButton.setEnabled(True)

    def showPlot(self):
        """self.nextButton.setEnabled(True)
        dir = "C:/Users/Julia/Desktop/Results/"
        for file in os.listdir(dir):
            pixmap = QtGui.QPixmap(os.path.join(dir, file))
            self.plotLabel.setScaledContents(True)
            self.plotLabel.setPixmap(pixmap)"""

        self.nextButton.setEnabled(True)
        dir = "../Temporal/Results/"

        for file in os.listdir(dir):
            fpath = os.path.join(dir, file)
            if os.path.isfile(fpath):
                self.fileList.append(fpath)

        self.fileList.sort()
        self.dirIterator = iter(self.fileList)

        pixmap = QtGui.QPixmap(self.fileList[0])
        self.plotLabel.setScaledContents(True)
        self.plotLabel.setPixmap(pixmap)



    def nextPlot(self):
        if self.fileList:
            try:
                filename = next(self.dirIterator)
                pixmap = QtGui.QPixmap(filename)
                if pixmap.isNull():
                    self.fileList.remove(filename)
                    self.nextPlot()
                else:
                    self.plotLabel.setScaledContents(True)
                    self.plotLabel.setPixmap(pixmap)
            except:
                # the iterator has finished, restart it
                self.dirIterator = iter(self.fileList)
                self.nextPlot()
        else:
            # no file list found, load an image
            self.showPlot()


    def previousPlot(self):
        if self.fileList:
            try:
                filename = next(self.dirIterator)
                pixmap = QtGui.QPixmap(filename)
                if pixmap.isNull():
                    # the file is not a valid image, remove it from the list
                    # and try to load the next one
                    self.fileList.remove(filename)
                    self.nextPlot()
                else:
                    self.plotLabel.setScaledContents(True)
                    self.plotLabel.setPixmap(pixmap)
            except:
                # the iterator has finished, restart it
                self.dirIterator = iter(self.fileList)
                self.nextPlot()
        else:
            # no file list found, load an image
            self.showPlot()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1442, 1019)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")



        self.pathLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.pathLineEdit.setGeometry(QtCore.QRect(10, 20, 371, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pathLineEdit.setFont(font)
        self.pathLineEdit.setObjectName("pathLineEdit")
        self.pathLineEdit.setReadOnly(True)



        self.browseButton = QtWidgets.QPushButton(self.centralwidget)
        self.browseButton.setGeometry(QtCore.QRect(390, 20, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.browseButton.setFont(font)
        self.browseButton.setObjectName("browseButton")

        # connecting clicking browseButton with function which browses file (browseFiles)
        self.browseButton.clicked.connect(self.browseFiles)





        self.uploadButton = QtWidgets.QPushButton(self.centralwidget)
        self.uploadButton.setGeometry(QtCore.QRect(530, 20, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.uploadButton.setFont(font)
        self.uploadButton.setObjectName("uploadButton")
        self.uploadButton.setEnabled(False)

        # connecting clicking uploadButton with function which uploads file (uploadFile)
        self.uploadButton.clicked.connect(self.uploadFile)





        self.methodComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.methodComboBox.setGeometry(QtCore.QRect(680, 20, 401, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.methodComboBox.setFont(font)
        self.methodComboBox.setObjectName("methodComboBox")
        self.methodComboBox.addItem("")
        self.methodComboBox.addItem("")
        self.methodComboBox.addItem("")
        self.methodComboBox.setEnabled(False)

        self.methodComboBox.activated.connect(self.chooseDetectionMethod)




        self.performButton = QtWidgets.QPushButton(self.centralwidget)
        self.performButton.setGeometry(QtCore.QRect(1090, 20, 341, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.performButton.setFont(font)
        self.performButton.setObjectName("performButton")
        self.performButton.setEnabled(False)

        # connecting clicking performButton with function which performs artifact's detection (performDetection)
        self.performButton.clicked.connect(self.performDetection)




        self.previousButton = QtWidgets.QPushButton(self.centralwidget)
        self.previousButton.setGeometry(QtCore.QRect(10, 450, 71, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.previousButton.setFont(font)
        self.previousButton.setObjectName("previousButton")
        self.previousButton.setEnabled(False)





        self.nextButton = QtWidgets.QPushButton(self.centralwidget)
        self.nextButton.setGeometry(QtCore.QRect(1360, 450, 71, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.nextButton.setFont(font)
        self.nextButton.setObjectName("nextButton")
        self.nextButton.setEnabled(False)

        # connecting clicking nextButton with function which shows next plot (nextPlot)
        self.nextButton.clicked.connect(self.nextPlot)





        self.plotLabel = QtWidgets.QLabel(self.centralwidget)
        self.plotLabel.setGeometry(QtCore.QRect(100, 130, 1241, 876))
        self.plotLabel.setText("")
        self.plotLabel.setObjectName("plotLabel")





        self.showButton = QtWidgets.QPushButton(MainWindow)
        self.showButton.setGeometry(QtCore.QRect(10, 70, 1421, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.showButton.setFont(font)
        self.showButton.setObjectName("showButton")
        self.showButton.setEnabled(False)

        # connecting clicking showButton with function which shows plots (showPlot)
        self.showButton.clicked.connect(self.showPlot)



        self.anotherButton = QtWidgets.QPushButton(MainWindow)
        self.anotherButton.setGeometry(QtCore.QRect(1350, 942, 81, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.anotherButton.setFont(font)
        self.anotherButton.setObjectName("anotherButton")
        self.anotherButton.setEnabled(False)




        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1277, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.browseButton.setText(_translate("MainWindow", "Browse"))
        self.uploadButton.setText(_translate("MainWindow", "Upload file"))
        self.methodComboBox.setItemText(0, _translate("MainWindow", "Method 1: detect external electrostatic potentials"))
        self.methodComboBox.setItemText(1, _translate("MainWindow", "Method 2: detect potentials derived from ECG"))
        self.methodComboBox.setItemText(2, _translate("MainWindow", "Method 3: detect low-frequency potentials"))
        self.performButton.setText(_translate("MainWindow", "Perform artifact detection"))
        self.previousButton.setText(_translate("MainWindow", "Previous"))
        self.nextButton.setText(_translate("MainWindow", "Next"))
        self.showButton.setText(_translate("MainWindow", "Show plots containing artifacts"))
        self.anotherButton.setText(_translate("MainWindow", "Another"))


    def __del__(self):
        print("deleting")
        folder = "../Temporal/Results"
        for filename in os.listdir(folder):
            fpath = os.path.join(folder, filename)
            try:
                if os.path.isfile(fpath) or os.path.islink(fpath):
                    os.unlink(fpath)
            except Exception as e:
                print("Failed to delete %s. Reason: %s" % (fpath, e))









if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # MainWindow.showMaximized()
    sys.exit(app.exec_())
